#Project Euler Questions #1-7
#Delta Sigma Pi
#Aaron Wong
import math

#If we list all the natural numbers below 10 that are multiples of 3 or 5,
#we get 3, 5, 6, and 9. The sum of these multiples is 23.
#Find the sum of all the multiples of 3 or 5 below 1000.

def Q1():
    #accumulator variable
    sum=0
    for i in range(1,1000):#runs through all numbers below 1000
        if i % 3 == 0 or i % 5 == 0:#says if it is divisible by 3 or 5 then it gets added to the accumulator variable
            sum = sum + i
            print(i)#prints all the numbers that are divisible
    print("The sum of all the multiples of 3 or 5 below 1000 is: ",sum)#prints the answer

#Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
#1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...
#By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

def Q2():
    #sets the limit
    limit = 4000000
    #sets initial list 
    numbers = [0,1]
    #accumulator variable
    sum = 0
    #for loop that runs every number from 1 to 4000000
    for i in range(limit):
        
        num = numbers[-1] + numbers[-2]
        #if the sum of the numbers are over the limit then it stops the for loop
        if num > limit:
            break
        #puts all the Fibonacci numbers back into the list
        numbers.append(num)
        #takes all the numbers and divides it by two and makes sure its even
        if num % 2 == 0:
            #adds the number into the sum accumulator variable that sums all the even fibonacci numbers
            sum = sum + num
    print("The sum of all even-valued terms that do not exceed four million in the Fibonacci sequence is:", sum)

    
#The prime factors of 13195 are 5, 7, 13, and 29.
#What is the largest prime factor of the number 600851475143

def Q3():
    num = 600851475143
    #Accumulator Variable
    largest_factor = 1  
    #for loop to run through all numbers from 2 up to square root of num 
    for i in range(2, int(num**0.5) + 1):
        #if i divides num and has no remainders then we enter the loop 
        while num % i == 0:
            #if i is a divisor of num then there is a prime number
            largest_factor = i
            #if it is a divisor we subtract it from num to make it get closer to the answer
            num = num - i  
    # If num is still greater than 1, it is prime and the largest factor
    if num > 1:
        #updates the largest_factor variable and puts the answer in    
        largest_factor = num
    
    print(largest_factor)

#A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-didget numbers
#is 9009 = 91 x 99
#Find the largest palindrome made from the product of two 3-diget numbers.
def Q4():
    def is_palindrome(num):
        original = str(num)
        reverse = ''
    
    # Construct the reverse string manually
        for char in original:
            reverse = reserve + char  # Prepend the character to reverse
    
        return original == reverse  # Check if the original and reversed are the same

    def largest_palindrome_product():
        max_palindrome = 0  #accumulator variable

    # Loop through all 3-digit numbers
        for i in range(100, 1000):
            for j in range(100, 1000):
                product = i * j  # Calculate the product of the two numbers
    
            # Check if the product is a palindrome and if it's larger than the current max
                if is_palindrome(product) and product > max_palindrome:
                    max_palindrome = product  # Update the maximum palindrome

        return max_palindrome  # Return the largest palindrome found
        print(largest_palindrome_product())
    



def Q6():
    #accumulator variable for Sum of Squares
    SoS = 0
    #for loop that runs through all numbers from 1 to 100
    for i in range(1,101):
        #takes all the numbers and squares them then adds them together inside the accumulator variable
        SoS = SoS + (i**2)
        # prints the answer
    print("The sum of squares of the first hundred natural numbers is:",SoS)
    #Accumulator variable for Squared Sum 
    SQS = 0
    # for loop that runs through all numbers from 1 to 100
    for j in range(1,101):
        #takes each number and adds it in the accumulator variable
        SQS = SQS + j
        #Prints the accumulator variable squared
    print("The square of the sum of the first one hundred natural numbers is:",SQS**2)
    #finds the difference between the two answers
    print("The difference between the sum of the squares of the first one hundreed natural numbers and the square of the sum is:", (SQS**2) - SoS)


def Q5(n):
    num = n  # Start with the number n
    while True:
        if all(num % i == 0 for i in range(1, n + 1)):
            return num
        num = num + n  # Increment by n to check only multiples of n
result = Q5(20)
print(result)


def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

def Q7(n):
    count = 0  # Count of found primes
    num = 1    # Start checking from 1

    while count < n:
        num = num + 1  # Move to the next number
        if is_prime(num):
            count = count + 1
    print(num)
         
